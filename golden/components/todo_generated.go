package components

import (
	"html/template"
	"os"

	"github.com/bketelsen/factor/markup"
)

var TodoTemplate = `<main>
	<Nav />
	<div>
	    <h1>{{ .Todo.Get.Name }}</h1>
	    <small>{{ .Todo.Get.Description }}</small>
	    <div>(<a href="{{ .Todo.Permalink }}">Permalink</a>)</div>
	</div>
</main>`
var TodoStyles = ``

// Todo is how factor binds a model to a component. It holds the an autogenerated
// TodoClient that holds a single Todo in memory and also provides a typesafe
// interface to the RPC calls to modify the TODO on the server.
//
// Don't create this struct directly, use NewTodo instead
type Todo struct {
	// this is the
	Client models.TodoClient
}

// Get is a convenience function that gets the current in-memory Todo
func (t Todo) Get() models.Todo {
	return t.Client.GetCurrent()
}

// Permalink is a convenience function to get the permalink for this todo.
func (t Todo) Permalink() string {
	return fmt.Sprintf("/todos/%s", t.Get().ID.String())
}

func (t *Todo) Render() string {
	tpl := template.Must(template.New("todo").Parse(TodoTemplate))
	return tpl.Execute(
		/*what do you put in here for the writer?*/
		os.Stdout,
		t,
	)
}

// NewTodo creates a new Todo with a fully populated client
func NewTodo(t models.Todo) Todo {
	return Todo{
		Client: models.NewTodoClient(t)
	}
}


func init() {
	markup.Register(&Todo{})
}
