//go:generate go run generate.go

// Generated from "Event reference" by Mozilla Contributors,
// https://developer.mozilla.org/en-US/docs/Web/Events, licensed under
// CC-BY-SA 2.5.
package markup

import "reflect"

// Abort is an event fired when a transaction has been aborted.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/abort_indexedDB
type Abort interface {
	OnAbort(e *Event)
}

// AfterPrint is an event fired when the associated document has started
// printing or the print preview has been closed.
//
// https://developer.mozilla.org/docs/Web/Events/afterprint
type AfterPrint interface {
	OnAfterPrint(e *Event)
}

// Afterscriptexecute is an event fired when a script has been executed.
//
// https://developer.mozilla.org/docs/Web/Events/afterscriptexecute
type Afterscriptexecute interface {
	OnAfterscriptexecute(e *Event)
}

// AlertActive is an event fired when a notification element is shown.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/AlertActive
type AlertActive interface {
	OnAlertActive(e *Event)
}

// AlertClose is an event fired when a notification element is closed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/AlertClose
type AlertClose interface {
	OnAlertClose(e *Event)
}

// Alerting is an event fired when the correspondent is being alerted (his/her
// phone is ringing).
//
// https://developer.mozilla.org/docs/Web/Events/alerting
type Alerting interface {
	OnAlerting(e *Event)
}

// AnimationEnd is an event fired when a CSS animation has completed.
//
// https://developer.mozilla.org/docs/Web/Events/animationend
type AnimationEnd interface {
	OnAnimationEnd(e *Event)
}

// AnimationIteration is an event fired when a CSS animation is repeated.
//
// https://developer.mozilla.org/docs/Web/Events/animationiteration
type AnimationIteration interface {
	OnAnimationIteration(e *Event)
}

// AnimationStart is an event fired when a CSS animation has started.
//
// https://developer.mozilla.org/docs/Web/Events/animationstart
type AnimationStart interface {
	OnAnimationStart(e *Event)
}

// Appinstalled is an event fired when a web application is successfully
// installed as a progressive web app.
//
// https://developer.mozilla.org/docs/Web/Events/appinstalled
type Appinstalled interface {
	OnAppinstalled(e *Event)
}

// AudioEnd is an event fired when the user agent has finished capturing audio
// for speech recognition.
//
// https://developer.mozilla.org/docs/Web/Events/audioend
type AudioEnd interface {
	OnAudioEnd(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/audioprocess
type AudioProcess interface {
	OnAudioProcess(e *Event)
}

// AudioStart is an event fired when the user agent has started to capture
// audio for speech recognition.
//
// https://developer.mozilla.org/docs/Web/Events/audiostart
type AudioStart interface {
	OnAudioStart(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/auxclick
type Auxclick interface {
	OnAuxclick(e *Event)
}

// BeforePrint is an event fired when the associated document is about to be
// printed or previewed for printing.
//
// https://developer.mozilla.org/docs/Web/Events/beforeprint
type BeforePrint interface {
	OnBeforePrint(e *Event)
}

// BeforeUnload is an event fired when the window, the document and its
// resources are about to be unloaded.
//
// https://developer.mozilla.org/docs/Web/Events/beforeunload
type BeforeUnload interface {
	OnBeforeUnload(e *Event)
}

// Beforeinstallprompt is an event fired when a user is prompted to save a web
// site to a home screen on mobile.
//
// https://developer.mozilla.org/docs/Web/Events/beforeinstallprompt
type Beforeinstallprompt interface {
	OnBeforeinstallprompt(e *Event)
}

// Beforescriptexecute is an event fired when a script is about to be executed.
//
// https://developer.mozilla.org/docs/Web/Events/beforescriptexecute
type Beforescriptexecute interface {
	OnBeforescriptexecute(e *Event)
}

// BeginEvent is an event fired when a SMIL animation element begins.
//
// https://developer.mozilla.org/docs/Web/Events/beginEvent
type BeginEvent interface {
	OnBeginEvent(e *Event)
}

// Blocked is an event fired when an open connection to a database is blocking
// a versionchange transaction on the same database.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/blocked_indexedDB
type Blocked interface {
	OnBlocked(e *Event)
}

// Blur is an event fired when an element has lost focus (does not bubble).
//
// https://developer.mozilla.org/docs/Web/Events/blur
type Blur interface {
	OnBlur(e *Event)
}

// Boundary is an event fired when the spoken utterance reaches a word or
// sentence boundary
//
// https://developer.mozilla.org/docs/Web/Events/boundary
type Boundary interface {
	OnBoundary(e *Event)
}

// Broadcast is an event fired when an observer noticed a change to the
// attributes of a watched broadcaster.
//
// https://developer.mozilla.org/docs/Web/Events/broadcast
type Broadcast interface {
	OnBroadcast(e *Event)
}

// Busy is an event fired when the line of the correspondent is busy.
//
// https://developer.mozilla.org/docs/Web/Events/busy
type Busy interface {
	OnBusy(e *Event)
}

// Cached is an event fired when the resources listed in the manifest have been
// downloaded, and the application is now cached.
//
// https://developer.mozilla.org/docs/Web/Events/cached
type Cached interface {
	OnCached(e *Event)
}

// Callschanged is an event fired when a call has been added or removed from
// the list of current calls.
//
// https://developer.mozilla.org/docs/Web/Events/callschanged
type Callschanged interface {
	OnCallschanged(e *Event)
}

// CanPlay is an event fired when the user agent can play the media, but
// estimates that not enough data has been loaded to play the media up to its
// end without having to stop for further buffering of content.
//
// https://developer.mozilla.org/docs/Web/Events/canplay
type CanPlay interface {
	OnCanPlay(e *Event)
}

// CanPlayThrough is an event fired when the user agent can play the media up
// to its end without having to stop for further buffering of content.
//
// https://developer.mozilla.org/docs/Web/Events/canplaythrough
type CanPlayThrough interface {
	OnCanPlayThrough(e *Event)
}

// Cardstatechange is an event fired when the MozMobileConnection.cardState
// property changes value.
//
// https://developer.mozilla.org/docs/Web/Events/cardstatechange
type Cardstatechange interface {
	OnCardstatechange(e *Event)
}

// Cfstatechange is an event fired when the call forwarding state changes.
//
// https://developer.mozilla.org/docs/Web/Events/cfstatechange
type Cfstatechange interface {
	OnCfstatechange(e *Event)
}

// Change is an event fired when this event is triggered each time a file is
// created, modified or deleted on a given storage area.
//
// https://developer.mozilla.org/docs/Web/Events/change
type Change interface {
	OnChange(e *Event)
}

// ChargingChange is an event fired when the battery begins or stops charging.
//
// https://developer.mozilla.org/docs/Web/Events/chargingchange
type ChargingChange interface {
	OnChargingChange(e *Event)
}

// ChargingTimeChange is an event fired when the chargingTime attribute has
// been updated.
//
// https://developer.mozilla.org/docs/Web/Events/chargingtimechange
type ChargingTimeChange interface {
	OnChargingTimeChange(e *Event)
}

// CheckboxStateChange is an event fired when the state of a checkbox has been
// changed either by a user action or by a script (useful for accessibility).
//
// https://developer.mozilla.org/docs/Web/Events/CheckboxStateChange
type CheckboxStateChange interface {
	OnCheckboxStateChange(e *Event)
}

// Checking is an event fired when the user agent is checking for an update, or
// attempting to download the cache manifest for the first time.
//
// https://developer.mozilla.org/docs/Web/Events/checking
type Checking interface {
	OnChecking(e *Event)
}

// Click is an event fired when a pointing device button has been pressed and
// released on an element.
//
// https://developer.mozilla.org/docs/Web/Events/click
type Click interface {
	OnClick(e *Event)
}

// Close is an event fired when the close button of the window has been
// clicked.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/close_event
type Close interface {
	OnClose(e *Event)
}

// Command is an event fired when an element has been activated.
//
// https://developer.mozilla.org/docs/Web/Events/command
type Command interface {
	OnCommand(e *Event)
}

// Commandupdate is an event fired when a command update occurred on a
// commandset element.
//
// https://developer.mozilla.org/docs/Web/Events/commandupdate
type Commandupdate interface {
	OnCommandupdate(e *Event)
}

// Complete is an event fired when a transaction successfully completed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/complete_indexedDB
type Complete interface {
	OnComplete(e *Event)
}

// CompositionEnd is an event fired when the composition of a passage of text
// has been completed or canceled.
//
// https://developer.mozilla.org/docs/Web/Events/compositionend
type CompositionEnd interface {
	OnCompositionEnd(e *Event)
}

// CompositionStart is an event fired when the composition of a passage of text
// is prepared (similar to keydown for a keyboard input, but works with other
// inputs such as speech recognition).
//
// https://developer.mozilla.org/docs/Web/Events/compositionstart
type CompositionStart interface {
	OnCompositionStart(e *Event)
}

// CompositionUpdate is an event fired when a character is added to a passage
// of text being composed.
//
// https://developer.mozilla.org/docs/Web/Events/compositionupdate
type CompositionUpdate interface {
	OnCompositionUpdate(e *Event)
}

// Connecting is an event fired when a call is about to connect.
//
// https://developer.mozilla.org/docs/Web/Events/connecting
type Connecting interface {
	OnConnecting(e *Event)
}

// ConnectionInfoUpdate is an event fired when the informations about the
// signal strength and the link speed have been updated.
//
// https://developer.mozilla.org/docs/Web/Events/connectionInfoUpdate
type ConnectionInfoUpdate interface {
	OnConnectionInfoUpdate(e *Event)
}

// ContextMenu is an event fired when the right button of the mouse is clicked
// (before the context menu is displayed).
//
// https://developer.mozilla.org/docs/Web/Events/contextmenu
type ContextMenu interface {
	OnContextMenu(e *Event)
}

// Copy is an event fired when the text selection has been added to the
// clipboard.
//
// https://developer.mozilla.org/docs/Web/Events/copy
type Copy interface {
	OnCopy(e *Event)
}

// CssRuleViewCSSLinkClicked is an event fired when a link to a CSS file has
// been clicked in the "Rules" view of the style inspector.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/CssRuleViewCSSLinkClicked
type CssRuleViewCSSLinkClicked interface {
	OnCssRuleViewCSSLinkClicked(e *Event)
}

// CssRuleViewChanged is an event fired when the "Rules" view of the style
// inspector has been changed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/CssRuleViewChanged
type CssRuleViewChanged interface {
	OnCssRuleViewChanged(e *Event)
}

// CssRuleViewRefreshed is an event fired when the "Rules" view of the style
// inspector has been updated.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/CssRuleViewRefreshed
type CssRuleViewRefreshed interface {
	OnCssRuleViewRefreshed(e *Event)
}

// Cut is an event fired when the text selection has been removed from the
// document and added to the clipboard.
//
// https://developer.mozilla.org/docs/Web/Events/cut
type Cut interface {
	OnCut(e *Event)
}

// DOMAutoComplete is an event fired when the content of an element has been
// auto-completed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMAutoComplete
type DOMAutoComplete interface {
	OnDOMAutoComplete(e *Event)
}

// DOMContentLoaded is an event fired when the document has finished loading
// (but not its dependent resources).
//
// https://developer.mozilla.org/docs/Web/Events/DOMContentLoaded
type DOMContentLoaded interface {
	OnDOMContentLoaded(e *Event)
}

// DOMFrameContentLoaded is an event fired when the frame has finished loading
// (but not its dependent resources).
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMFrameContentLoaded
type DOMFrameContentLoaded interface {
	OnDOMFrameContentLoaded(e *Event)
}

// DOMLinkAdded is an event fired when a link has been added a document.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMLinkAdded
type DOMLinkAdded interface {
	OnDOMLinkAdded(e *Event)
}

// DOMLinkRemoved is an event fired when a link has been removed inside from a
// document.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMLinkRemoved
type DOMLinkRemoved interface {
	OnDOMLinkRemoved(e *Event)
}

// DOMMenuItemActive is an event fired when a menu or menuitem has been hovered
// or highlighted.
//
// https://developer.mozilla.org/docs/Web/Events/DOMMenuItemActive
type DOMMenuItemActive interface {
	OnDOMMenuItemActive(e *Event)
}

// DOMMenuItemInactive is an event fired when a menu or menuitem is no longer
// hovered or highlighted.
//
// https://developer.mozilla.org/docs/Web/Events/DOMMenuItemInactive
type DOMMenuItemInactive interface {
	OnDOMMenuItemInactive(e *Event)
}

// DOMMetaAdded is an event fired when a meta element has been added to a
// document.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMMetaAdded
type DOMMetaAdded interface {
	OnDOMMetaAdded(e *Event)
}

// DOMMetaRemoved is an event fired when a meta element has been removed from a
// document.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMMetaRemoved
type DOMMetaRemoved interface {
	OnDOMMetaRemoved(e *Event)
}

// DOMModalDialogClosed is an event fired when a modal dialog has been closed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMModalDialogClosed
type DOMModalDialogClosed interface {
	OnDOMModalDialogClosed(e *Event)
}

// DOMPopupBlocked is an event fired when a popup has been blocked
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMPopupBlocked
type DOMPopupBlocked interface {
	OnDOMPopupBlocked(e *Event)
}

// DOMTitleChanged is an event fired when the title of a window has changed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMTitleChanged
type DOMTitleChanged interface {
	OnDOMTitleChanged(e *Event)
}

// DOMWillOpenModalDialog is an event fired when a modal dialog is about to
// open.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMWillOpenModalDialog
type DOMWillOpenModalDialog interface {
	OnDOMWillOpenModalDialog(e *Event)
}

// DOMWindowClose is an event fired when a window is about to be closed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMWindowClose
type DOMWindowClose interface {
	OnDOMWindowClose(e *Event)
}

// DOMWindowCreated is an event fired when a window has been created.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/DOMWindowCreated
type DOMWindowCreated interface {
	OnDOMWindowCreated(e *Event)
}

// Datachange is an event fired when the MozMobileConnection.data object
// changes values.
//
// https://developer.mozilla.org/docs/Web/Events/datachange
type Datachange interface {
	OnDatachange(e *Event)
}

// Dataerror is an event fired when the MozMobileConnection.data object receive
// an error from the RIL.
//
// https://developer.mozilla.org/docs/Web/Events/dataerror
type Dataerror interface {
	OnDataerror(e *Event)
}

// Delivered is an event fired when an SMS has been successfully delivered.
//
// https://developer.mozilla.org/docs/Web/Events/delivered
type Delivered interface {
	OnDelivered(e *Event)
}

// DeviceLight is an event fired when fresh data is available from a light
// sensor.
//
// https://developer.mozilla.org/docs/Web/Events/devicelight
type DeviceLight interface {
	OnDeviceLight(e *Event)
}

// DeviceMotion is an event fired when fresh data is available from a motion
// sensor.
//
// https://developer.mozilla.org/docs/Web/Events/devicemotion
type DeviceMotion interface {
	OnDeviceMotion(e *Event)
}

// DeviceOrientation is an event fired when fresh data is available from an
// orientation sensor.
//
// https://developer.mozilla.org/docs/Web/Events/deviceorientation
type DeviceOrientation interface {
	OnDeviceOrientation(e *Event)
}

// DeviceProximity is an event fired when fresh data is available from a
// proximity sensor (indicates an approximated distance between the device and
// a nearby object).
//
// https://developer.mozilla.org/docs/Web/Events/deviceproximity
type DeviceProximity interface {
	OnDeviceProximity(e *Event)
}

// Devicechange is an event fired when a media device such as a camera,
// microphone, or speaker is connected or removed from the system.
//
// https://developer.mozilla.org/docs/Web/Events/devicechange
type Devicechange interface {
	OnDevicechange(e *Event)
}

// Dialing is an event fired when the number of a correspondent has been
// dialed.
//
// https://developer.mozilla.org/docs/Web/Events/dialing
type Dialing interface {
	OnDialing(e *Event)
}

// Disabled is an event fired when wifi has been disabled on the device.
//
// https://developer.mozilla.org/docs/Web/Events/disabled
type Disabled interface {
	OnDisabled(e *Event)
}

// DischargingTimeChange is an event fired when the dischargingTime attribute
// has been updated.
//
// https://developer.mozilla.org/docs/Web/Events/dischargingtimechange
type DischargingTimeChange interface {
	OnDischargingTimeChange(e *Event)
}

// Disconnected is an event fired when a call has been disconnected.
//
// https://developer.mozilla.org/docs/Web/Events/disconnected
type Disconnected interface {
	OnDisconnected(e *Event)
}

// Disconnecting is an event fired when a call is about to disconnect.
//
// https://developer.mozilla.org/docs/Web/Events/disconnecting
type Disconnecting interface {
	OnDisconnecting(e *Event)
}

// DoubleClick is an event fired when a pointing device button is clicked twice
// on an element.
//
// https://developer.mozilla.org/docs/Web/Events/dblclick
type DoubleClick interface {
	OnDoubleClick(e *Event)
}

// Downloading is an event fired when the user agent has found an update and is
// fetching it, or is downloading the resources listed by the cache manifest
// for the first time.
//
// https://developer.mozilla.org/docs/Web/Events/downloading
type Downloading interface {
	OnDownloading(e *Event)
}

// Drag is an event fired when an element or text selection is being dragged
// (every 350ms).
//
// https://developer.mozilla.org/docs/Web/Events/drag
type Drag interface {
	OnDrag(e *Event)
}

// DragEnd is an event fired when a drag operation is being ended (by releasing
// a mouse button or hitting the escape key).
//
// https://developer.mozilla.org/docs/Web/Events/dragend
type DragEnd interface {
	OnDragEnd(e *Event)
}

// DragEnter is an event fired when a dragged element or text selection enters
// a valid drop target.
//
// https://developer.mozilla.org/docs/Web/Events/dragenter
type DragEnter interface {
	OnDragEnter(e *Event)
}

// DragLeave is an event fired when a dragged element or text selection leaves
// a valid drop target.
//
// https://developer.mozilla.org/docs/Web/Events/dragleave
type DragLeave interface {
	OnDragLeave(e *Event)
}

// DragOver is an event fired when an element or text selection is being
// dragged over a valid drop target (every 350ms).
//
// https://developer.mozilla.org/docs/Web/Events/dragover
type DragOver interface {
	OnDragOver(e *Event)
}

// DragStart is an event fired when the user starts dragging an element or text
// selection.
//
// https://developer.mozilla.org/docs/Web/Events/dragstart
type DragStart interface {
	OnDragStart(e *Event)
}

// Drop is an event fired when an element is dropped on a valid drop target.
//
// https://developer.mozilla.org/docs/Web/Events/drop
type Drop interface {
	OnDrop(e *Event)
}

// DurationChange is an event fired when the duration attribute has been
// updated.
//
// https://developer.mozilla.org/docs/Web/Events/durationchange
type DurationChange interface {
	OnDurationChange(e *Event)
}

// Emptied is an event fired when the media has become empty; for example, this
// event is sent if the media has already been loaded (or partially loaded),
// and the load() method is called to reload it.
//
// https://developer.mozilla.org/docs/Web/Events/emptied
type Emptied interface {
	OnEmptied(e *Event)
}

// Enabled is an event fired when wifi has been enabled on the device.
//
// https://developer.mozilla.org/docs/Web/Events/enabled
type Enabled interface {
	OnEnabled(e *Event)
}

// End is an event fired when the utterance has finished being spoken.
//
// https://developer.mozilla.org/docs/Web/Events/end_(SpeechSynthesis)
type End interface {
	OnEnd(e *Event)
}

// EndEvent is an event fired when a SMIL animation element ends.
//
// https://developer.mozilla.org/docs/Web/Events/endEvent
type EndEvent interface {
	OnEndEvent(e *Event)
}

// Ended is an event fired when playback has stopped because the end of the
// media was reached.
//
// https://developer.mozilla.org/docs/Web/Events/ended_(Web_Audio)
type Ended interface {
	OnEnded(e *Event)
}

// Error is an event fired when an error occurred.
//
// https://developer.mozilla.org/docs/Web/Events/error_(Telephony)
type Error interface {
	OnError(e *Event)
}

// Focus is an event fired when an element has received focus (does not
// bubble).
//
// https://developer.mozilla.org/docs/Web/Events/focus
type Focus interface {
	OnFocus(e *Event)
}

// FocusIn is an event fired when an element is about to receive focus
// (bubbles).
//
// https://developer.mozilla.org/docs/Web/Events/focusin
type FocusIn interface {
	OnFocusIn(e *Event)
}

// FocusOut is an event fired when an element is about to lose focus (bubbles).
//
// https://developer.mozilla.org/docs/Web/Events/focusout
type FocusOut interface {
	OnFocusOut(e *Event)
}

// FullScreenChange is an event fired when an element was turned to fullscreen
// mode or back to normal mode.
//
// https://developer.mozilla.org/docs/Web/Events/fullscreenchange
type FullScreenChange interface {
	OnFullScreenChange(e *Event)
}

// FullScreenError is an event fired when it was impossible to switch to
// fullscreen mode for technical reasons or because the permission was denied.
//
// https://developer.mozilla.org/docs/Web/Events/fullscreenerror
type FullScreenError interface {
	OnFullScreenError(e *Event)
}

// Fullscreen is an event fired when browser fullscreen mode has been entered
// or left.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/fullscreen
type Fullscreen interface {
	OnFullscreen(e *Event)
}

// GamepadConnected is an event fired when a gamepad has been connected.
//
// https://developer.mozilla.org/docs/Web/Events/gamepadconnected
type GamepadConnected interface {
	OnGamepadConnected(e *Event)
}

// GamepadDisconnected is an event fired when a gamepad has been disconnected.
//
// https://developer.mozilla.org/docs/Web/Events/gamepaddisconnected
type GamepadDisconnected interface {
	OnGamepadDisconnected(e *Event)
}

// GotPointerCapture is an event fired when element receives pointer capture.
//
// https://developer.mozilla.org/docs/Web/Events/gotpointercapture
type GotPointerCapture interface {
	OnGotPointerCapture(e *Event)
}

// HashChange is an event fired when the fragment identifier of the URL has
// changed (the part of the URL after the #).
//
// https://developer.mozilla.org/docs/Web/Events/hashchange
type HashChange interface {
	OnHashChange(e *Event)
}

// Held is an event fired when a call has been held.
//
// https://developer.mozilla.org/docs/Web/Events/held
type Held interface {
	OnHeld(e *Event)
}

// Holding is an event fired when a call is about to be held.
//
// https://developer.mozilla.org/docs/Web/Events/holding
type Holding interface {
	OnHolding(e *Event)
}

// Icccardlockerror is an event fired when the
// MozMobileConnection.unlockCardLock() or MozMobileConnection.setCardLock()
// methods fails.
//
// https://developer.mozilla.org/docs/Web/Events/icccardlockerror
type Icccardlockerror interface {
	OnIcccardlockerror(e *Event)
}

// Iccinfochange is an event fired when the MozMobileConnection.iccInfo object
// changes.
//
// https://developer.mozilla.org/docs/Web/Events/iccinfochange
type Iccinfochange interface {
	OnIccinfochange(e *Event)
}

// Incoming is an event fired when a call is being received.
//
// https://developer.mozilla.org/docs/Web/Events/incoming
type Incoming interface {
	OnIncoming(e *Event)
}

// Input is an event fired when the value of an element changes or the content
// of an element with the attribute contenteditable is modified.
//
// https://developer.mozilla.org/docs/Web/Events/input
type Input interface {
	OnInput(e *Event)
}

// Invalid is an event fired when a submittable element has been checked and
// doesn't satisfy its constraints.
//
// https://developer.mozilla.org/docs/Web/Events/invalid
type Invalid interface {
	OnInvalid(e *Event)
}

// KeyDown is an event fired when a key is pressed down.
//
// https://developer.mozilla.org/docs/Web/Events/keydown
type KeyDown interface {
	OnKeyDown(e *Event)
}

// KeyPress is an event fired when a key is pressed down and that key normally
// produces a character value (use input instead).
//
// https://developer.mozilla.org/docs/Web/Events/keypress
type KeyPress interface {
	OnKeyPress(e *Event)
}

// KeyUp is an event fired when a key is released.
//
// https://developer.mozilla.org/docs/Web/Events/keyup
type KeyUp interface {
	OnKeyUp(e *Event)
}

// LanguageChange is an event fired when the user's preferred languages have
// changed.
//
// https://developer.mozilla.org/docs/Web/Events/languagechange
type LanguageChange interface {
	OnLanguageChange(e *Event)
}

// LevelChange is an event fired when the level attribute has been updated.
//
// https://developer.mozilla.org/docs/Web/Events/levelchange
type LevelChange interface {
	OnLevelChange(e *Event)
}

// Load is an event fired when progression has been successful.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/load_(ProgressEvent)
type Load interface {
	OnLoad(e *Event)
}

// LoadEnd is an event fired when progress has stopped (after "error", "abort"
// or "load" have been dispatched).
//
// https://developer.mozilla.org/docs/Web/Events/loadend
type LoadEnd interface {
	OnLoadEnd(e *Event)
}

// LoadStart is an event fired when progress has begun.
//
// https://developer.mozilla.org/docs/Web/Events/loadstart
type LoadStart interface {
	OnLoadStart(e *Event)
}

// LoadedData is an event fired when the first frame of the media has finished
// loading.
//
// https://developer.mozilla.org/docs/Web/Events/loadeddata
type LoadedData interface {
	OnLoadedData(e *Event)
}

// LoadedMetadata is an event fired when the metadata has been loaded.
//
// https://developer.mozilla.org/docs/Web/Events/loadedmetadata
type LoadedMetadata interface {
	OnLoadedMetadata(e *Event)
}

// Localized is an event fired when the page has been localized using
// data-l10n-* attributes.
//
// https://developer.mozilla.org/docs/Web/Events/localized
type Localized interface {
	OnLocalized(e *Event)
}

// LostPointerCapture is an event fired when element lost pointer capture.
//
// https://developer.mozilla.org/docs/Web/Events/lostpointercapture
type LostPointerCapture interface {
	OnLostPointerCapture(e *Event)
}

// Mark is an event fired when the spoken utterance reaches a named SSML "mark"
// tag.
//
// https://developer.mozilla.org/docs/Web/Events/mark
type Mark interface {
	OnMark(e *Event)
}

// Message is an event fired when a message is received from a service worker,
// or a message is received in a service worker from another context.
//
// https://developer.mozilla.org/docs/Web/Events/message_(ServiceWorker)
type Message interface {
	OnMessage(e *Event)
}

// Messageerror is an event fired when a message error is raised when a message
// is received by an object.
//
// https://developer.mozilla.org/docs/Web/Events/messageerror
type Messageerror interface {
	OnMessageerror(e *Event)
}

// MouseDown is an event fired when a pointing device button (usually a mouse)
// is pressed on an element.
//
// https://developer.mozilla.org/docs/Web/Events/mousedown
type MouseDown interface {
	OnMouseDown(e *Event)
}

// MouseEnter is an event fired when a pointing device is moved onto the
// element that has the listener attached.
//
// https://developer.mozilla.org/docs/Web/Events/mouseenter
type MouseEnter interface {
	OnMouseEnter(e *Event)
}

// MouseLeave is an event fired when a pointing device is moved off the element
// that has the listener attached.
//
// https://developer.mozilla.org/docs/Web/Events/mouseleave
type MouseLeave interface {
	OnMouseLeave(e *Event)
}

// MouseMove is an event fired when a pointing device is moved over an element.
//
// https://developer.mozilla.org/docs/Web/Events/mousemove
type MouseMove interface {
	OnMouseMove(e *Event)
}

// MouseOut is an event fired when a pointing device is moved off the element
// that has the listener attached or off one of its children.
//
// https://developer.mozilla.org/docs/Web/Events/mouseout
type MouseOut interface {
	OnMouseOut(e *Event)
}

// MouseOver is an event fired when a pointing device is moved onto the element
// that has the listener attached or onto one of its children.
//
// https://developer.mozilla.org/docs/Web/Events/mouseover
type MouseOver interface {
	OnMouseOver(e *Event)
}

// MouseUp is an event fired when a pointing device button is released over an
// element.
//
// https://developer.mozilla.org/docs/Web/Events/mouseup
type MouseUp interface {
	OnMouseUp(e *Event)
}

// MozAfterPaint is an event fired when content has been repainted.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozAfterPaint
type MozAfterPaint interface {
	OnMozAfterPaint(e *Event)
}

// MozAudioAvailable is an event fired when the audio buffer is full and the
// corresponding raw samples are available.
//
// https://developer.mozilla.org/docs/Web/Events/MozAudioAvailable
type MozAudioAvailable interface {
	OnMozAudioAvailable(e *Event)
}

// MozBeforeResize is an event fired when a window is about to be resized.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozBeforeResize
type MozBeforeResize interface {
	OnMozBeforeResize(e *Event)
}

// MozEdgeUIGesture is an event fired when a touch point is swiped across the
// touch surface to invoke the edge UI (Win8 only).
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozEdgeUIGesture
type MozEdgeUIGesture interface {
	OnMozEdgeUIGesture(e *Event)
}

// MozEnteredDomFullscreen is an event fired when dOM fullscreen mode has been
// entered.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozEnteredDomFullscreen
type MozEnteredDomFullscreen interface {
	OnMozEnteredDomFullscreen(e *Event)
}

// MozGamepadButtonDown is an event fired when a gamepad button is pressed
// down.
//
// https://developer.mozilla.org/docs/Web/Events/MozGamepadButtonDown
type MozGamepadButtonDown interface {
	OnMozGamepadButtonDown(e *Event)
}

// MozGamepadButtonUp is an event fired when a gamepad button is released.
//
// https://developer.mozilla.org/docs/Web/Events/MozGamepadButtonUp
type MozGamepadButtonUp interface {
	OnMozGamepadButtonUp(e *Event)
}

// MozMagnifyGesture is an event fired when two touch points moved away from
// each other (after a sequence of MozMagnifyGestureUpdate).
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozMagnifyGesture
type MozMagnifyGesture interface {
	OnMozMagnifyGesture(e *Event)
}

// MozMagnifyGestureStart is an event fired when two touch points start to move
// away from each other.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozMagnifyGestureStart
type MozMagnifyGestureStart interface {
	OnMozMagnifyGestureStart(e *Event)
}

// MozMagnifyGestureUpdate is an event fired when two touch points move away
// from each other (after a MozMagnifyGestureStart).
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozMagnifyGestureUpdate
type MozMagnifyGestureUpdate interface {
	OnMozMagnifyGestureUpdate(e *Event)
}

// MozPressTapGesture is an event fired when a "press-tap" gesture happened on
// the touch surface (first finger down, second finger down, second finger up,
// first finger up).
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozPressTapGesture
type MozPressTapGesture interface {
	OnMozPressTapGesture(e *Event)
}

// MozRotateGesture is an event fired when two touch points rotate around a
// point (after a sequence of MozRotateGestureUpdate).
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozRotateGesture
type MozRotateGesture interface {
	OnMozRotateGesture(e *Event)
}

// MozRotateGestureStart is an event fired when two touch points start to
// rotate around a point.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozRotateGestureStart
type MozRotateGestureStart interface {
	OnMozRotateGestureStart(e *Event)
}

// MozRotateGestureUpdate is an event fired when two touch points rotate around
// a point (after a MozRotateGestureStart).
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozRotateGestureUpdate
type MozRotateGestureUpdate interface {
	OnMozRotateGestureUpdate(e *Event)
}

// MozScrolledAreaChanged is an event fired when the document view has been
// scrolled or resized.
//
// https://developer.mozilla.org/docs/Web/Events/MozScrolledAreaChanged
type MozScrolledAreaChanged interface {
	OnMozScrolledAreaChanged(e *Event)
}

// MozSwipeGesture is an event fired when a touch point is swiped across the
// touch surface
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozSwipeGesture
type MozSwipeGesture interface {
	OnMozSwipeGesture(e *Event)
}

// MozTapGesture is an event fired when two touch points are tapped on the
// touch surface.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/MozTapGesture
type MozTapGesture interface {
	OnMozTapGesture(e *Event)
}

// Mozbrowseractivitydone is an event fired when sent when some activity has
// been completed (complete description TBD.)
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowseractivitydone
type Mozbrowseractivitydone interface {
	OnMozbrowseractivitydone(e *Event)
}

// Mozbrowserasyncscroll is an event fired when sent when the scroll position
// within a browser <iframe> changes.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserasyncscroll
type Mozbrowserasyncscroll interface {
	OnMozbrowserasyncscroll(e *Event)
}

// Mozbrowseraudioplaybackchange is an event fired when sent when audio starts
// or stops playing within the browser <iframe> content.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowseraudioplaybackchange
type Mozbrowseraudioplaybackchange interface {
	OnMozbrowseraudioplaybackchange(e *Event)
}

// Mozbrowsercaretstatechanged is an event fired when sent when the text
// selected inside the browser <iframe> content changes.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsercaretstatechanged
type Mozbrowsercaretstatechanged interface {
	OnMozbrowsercaretstatechanged(e *Event)
}

// Mozbrowserclose is an event fired when sent when window.close() is called
// within a browser <iframe>.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserclose
type Mozbrowserclose interface {
	OnMozbrowserclose(e *Event)
}

// Mozbrowsercontextmenu is an event fired when sent when a browser <iframe>
// try to open a context menu.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsercontextmenu
type Mozbrowsercontextmenu interface {
	OnMozbrowsercontextmenu(e *Event)
}

// Mozbrowserdocumentfirstpaint is an event fired when sent when a new paint
// occurs on any document in the browser <iframe>.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserdocumentfirstpaint
type Mozbrowserdocumentfirstpaint interface {
	OnMozbrowserdocumentfirstpaint(e *Event)
}

// Mozbrowsererror is an event fired when sent when an error occured while
// trying to load a content within a browser iframe
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsererror
type Mozbrowsererror interface {
	OnMozbrowsererror(e *Event)
}

// Mozbrowserfindchange is an event fired when sent when a search operation is
// performed on the browser <iframe> content (see HTMLIFrameElement search
// methods.)
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserfindchange
type Mozbrowserfindchange interface {
	OnMozbrowserfindchange(e *Event)
}

// Mozbrowserfirstpaint is an event fired when sent when the <iframe> paints
// content for the first time (this doesn't include the initial paint from
// about:blank.)
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserfirstpaint
type Mozbrowserfirstpaint interface {
	OnMozbrowserfirstpaint(e *Event)
}

// Mozbrowsericonchange is an event fired when sent when the favicon of a
// browser iframe changes.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsericonchange
type Mozbrowsericonchange interface {
	OnMozbrowsericonchange(e *Event)
}

// Mozbrowserloadend is an event fired when sent when the browser iframe has
// finished loading all its assets.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserloadend
type Mozbrowserloadend interface {
	OnMozbrowserloadend(e *Event)
}

// Mozbrowserloadstart is an event fired when sent when the browser iframe
// starts to load a new page.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserloadstart
type Mozbrowserloadstart interface {
	OnMozbrowserloadstart(e *Event)
}

// Mozbrowserlocationchange is an event fired when sent when an browser
// iframe's location changes.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserlocationchange
type Mozbrowserlocationchange interface {
	OnMozbrowserlocationchange(e *Event)
}

// Mozbrowsermanifestchange is an event fired when sent when a the path to the
// app manifest changes, in the case of a browser <iframe> with an open web app
// embedded in it.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsermanifestchange
type Mozbrowsermanifestchange interface {
	OnMozbrowsermanifestchange(e *Event)
}

// Mozbrowsermetachange is an event fired when sent when a <meta> elelment is
// added to, removed from or changed in the browser <iframe>'s content.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsermetachange
type Mozbrowsermetachange interface {
	OnMozbrowsermetachange(e *Event)
}

// Mozbrowseropensearch is an event fired when sent when a link to a search
// engine is found.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowseropensearch
type Mozbrowseropensearch interface {
	OnMozbrowseropensearch(e *Event)
}

// Mozbrowseropentab is an event fired when sent when a new tab is opened
// within a browser <iframe> as a result of the user issuing a command to open
// a link target in a new tab (for example ctrl/cmd + click.)
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowseropentab
type Mozbrowseropentab interface {
	OnMozbrowseropentab(e *Event)
}

// Mozbrowseropenwindow is an event fired when sent when window.open() is
// called within a browser iframe.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowseropenwindow
type Mozbrowseropenwindow interface {
	OnMozbrowseropenwindow(e *Event)
}

// Mozbrowserresize is an event fired when sent when the browser <iframe>'s
// window size has changed.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserresize
type Mozbrowserresize interface {
	OnMozbrowserresize(e *Event)
}

// Mozbrowserscroll is an event fired when sent when the browser <iframe>
// content scrolls.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserscroll
type Mozbrowserscroll interface {
	OnMozbrowserscroll(e *Event)
}

// Mozbrowserscrollareachanged is an event fired when sent when the available
// scrolling area in the browser <iframe> changes. This can occur on resize and
// when the page size changes (while loading for example.)
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserscrollareachanged
type Mozbrowserscrollareachanged interface {
	OnMozbrowserscrollareachanged(e *Event)
}

// Mozbrowserscrollviewchange is an event fired when sent when asynchronous
// scrolling (i.e. APCZ) starts or stops.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserscrollviewchange
type Mozbrowserscrollviewchange interface {
	OnMozbrowserscrollviewchange(e *Event)
}

// Mozbrowsersecuritychange is an event fired when sent when the SSL state
// changes within a browser iframe.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsersecuritychange
type Mozbrowsersecuritychange interface {
	OnMozbrowsersecuritychange(e *Event)
}

// Mozbrowserselectionstatechanged is an event fired when sent when the text
// selected inside the browser <iframe> content changes. Note that this is
// deprecated, and newer implementations use mozbrowsercaretstatechanged
// instead.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserselectionstatechanged
type Mozbrowserselectionstatechanged interface {
	OnMozbrowserselectionstatechanged(e *Event)
}

// Mozbrowsershowmodalprompt is an event fired when sent when alert(),
// confirm() or prompt() are called within a browser iframe
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsershowmodalprompt
type Mozbrowsershowmodalprompt interface {
	OnMozbrowsershowmodalprompt(e *Event)
}

// Mozbrowsertitlechange is an event fired when sent when the document.title
// changes within a browser iframe.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowsertitlechange
type Mozbrowsertitlechange interface {
	OnMozbrowsertitlechange(e *Event)
}

// Mozbrowserusernameandpasswordrequired is an event fired when sent when an
// HTTP authentification is requested.
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowserusernameandpasswordrequired
type Mozbrowserusernameandpasswordrequired interface {
	OnMozbrowserusernameandpasswordrequired(e *Event)
}

// Mozbrowservisibilitychange is an event fired when sent when the visibility
// state of the current browser iframe <iframe> changes, for example due to a
// call to setVisible().
//
// https://developer.mozilla.org/docs/Web/Events/mozbrowservisibilitychange
type Mozbrowservisibilitychange interface {
	OnMozbrowservisibilitychange(e *Event)
}

// Moztimechange is an event fired when the time of the device has been
// changed.
//
// https://developer.mozilla.org/docs/Web/Events/moztimechange
type Moztimechange interface {
	OnMoztimechange(e *Event)
}

// NoMatch is an event fired when the speech recognition service returns a
// final result with no significant recognition.
//
// https://developer.mozilla.org/docs/Web/Events/nomatch
type NoMatch interface {
	OnNoMatch(e *Event)
}

// NoUpdate is an event fired when the manifest hadn't changed.
//
// https://developer.mozilla.org/docs/Web/Events/noupdate
type NoUpdate interface {
	OnNoUpdate(e *Event)
}

// NotificationClick is an event fired when a system notification spawned by
// ServiceWorkerRegistration.showNotification() has been clicked.
//
// https://developer.mozilla.org/docs/Web/Events/notificationclick
type NotificationClick interface {
	OnNotificationClick(e *Event)
}

// Obsolete is an event fired when the manifest was found to have become a 404
// or 410 page, so the application cache is being deleted.
//
// https://developer.mozilla.org/docs/Web/Events/obsolete
type Obsolete interface {
	OnObsolete(e *Event)
}

// Offline is an event fired when the browser has lost access to the network.
//
// https://developer.mozilla.org/docs/Web/Events/offline
type Offline interface {
	OnOffline(e *Event)
}

// Onconnected is an event fired when a call has been connected.
//
// https://developer.mozilla.org/docs/DOM/onconnected
type Onconnected interface {
	OnOnconnected(e *Event)
}

// Online is an event fired when the browser has gained access to the network
// (but particular websites might be unreachable).
//
// https://developer.mozilla.org/docs/Web/Events/online
type Online interface {
	OnOnline(e *Event)
}

// Open is an event fired when an event source connection has been established.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/open_serversentevents
type Open interface {
	OnOpen(e *Event)
}

// OrientationChange is an event fired when the orientation of the device
// (portrait/landscape) has changed
//
// https://developer.mozilla.org/docs/Web/Events/orientationchange
type OrientationChange interface {
	OnOrientationChange(e *Event)
}

// Overflow is an event fired when an element has been overflowed by its
// content or has been rendered for the first time in this state (only works
// for elements styled with overflow != visible).
//
// https://developer.mozilla.org/docs/Web/Events/overflow
type Overflow interface {
	OnOverflow(e *Event)
}

// PageHide is an event fired when a session history entry is being traversed
// from.
//
// https://developer.mozilla.org/docs/Web/Events/pagehide
type PageHide interface {
	OnPageHide(e *Event)
}

// PageShow is an event fired when a session history entry is being traversed
// to.
//
// https://developer.mozilla.org/docs/Web/Events/pageshow
type PageShow interface {
	OnPageShow(e *Event)
}

// Paste is an event fired when data has been transferred from the system
// clipboard to the document.
//
// https://developer.mozilla.org/docs/Web/Events/paste
type Paste interface {
	OnPaste(e *Event)
}

// Pause is an event fired when the utterance is paused part way through.
//
// https://developer.mozilla.org/docs/Web/Events/pause_(SpeechSynthesis)
type Pause interface {
	OnPause(e *Event)
}

// Play is an event fired when playback has begun.
//
// https://developer.mozilla.org/docs/Web/Events/play
type Play interface {
	OnPlay(e *Event)
}

// Playing is an event fired when playback is ready to start after having been
// paused or delayed due to lack of data.
//
// https://developer.mozilla.org/docs/Web/Events/playing
type Playing interface {
	OnPlaying(e *Event)
}

// PointerCancel is an event fired when the pointer is unlikely to produce any
// more events.
//
// https://developer.mozilla.org/docs/Web/Events/pointercancel
type PointerCancel interface {
	OnPointerCancel(e *Event)
}

// PointerDown is an event fired when the pointer enters the active buttons
// state.
//
// https://developer.mozilla.org/docs/Web/Events/pointerdown
type PointerDown interface {
	OnPointerDown(e *Event)
}

// PointerEnter is an event fired when pointing device is moved inside the
// hit-testing boundary.
//
// https://developer.mozilla.org/docs/Web/Events/pointerenter
type PointerEnter interface {
	OnPointerEnter(e *Event)
}

// PointerLeave is an event fired when pointing device is moved out of the
// hit-testing boundary.
//
// https://developer.mozilla.org/docs/Web/Events/pointerleave
type PointerLeave interface {
	OnPointerLeave(e *Event)
}

// PointerLockChange is an event fired when the pointer was locked or released.
//
// https://developer.mozilla.org/docs/Web/Events/pointerlockchange
type PointerLockChange interface {
	OnPointerLockChange(e *Event)
}

// PointerLockError is an event fired when it was impossible to lock the
// pointer for technical reasons or because the permission was denied.
//
// https://developer.mozilla.org/docs/Web/Events/pointerlockerror
type PointerLockError interface {
	OnPointerLockError(e *Event)
}

// PointerMove is an event fired when the pointer changed coordinates.
//
// https://developer.mozilla.org/docs/Web/Events/pointermove
type PointerMove interface {
	OnPointerMove(e *Event)
}

// PointerOut is an event fired when the pointing device moved out of
// hit-testing boundary or leaves detectable hover range.
//
// https://developer.mozilla.org/docs/Web/Events/pointerout
type PointerOut interface {
	OnPointerOut(e *Event)
}

// PointerOver is an event fired when the pointing device is moved into the
// hit-testing boundary.
//
// https://developer.mozilla.org/docs/Web/Events/pointerover
type PointerOver interface {
	OnPointerOver(e *Event)
}

// PointerUp is an event fired when the pointer leaves the active buttons
// state.
//
// https://developer.mozilla.org/docs/Web/Events/pointerup
type PointerUp interface {
	OnPointerUp(e *Event)
}

// PopState is an event fired when a session history entry is being navigated
// to (in certain cases).
//
// https://developer.mozilla.org/docs/Web/Events/popstate
type PopState interface {
	OnPopState(e *Event)
}

// Popuphidden is an event fired when a menupopup, panel or tooltip has been
// hidden.
//
// https://developer.mozilla.org/docs/Web/Events/popuphidden
type Popuphidden interface {
	OnPopuphidden(e *Event)
}

// Popuphiding is an event fired when a menupopup, panel or tooltip is about to
// be hidden.
//
// https://developer.mozilla.org/docs/Web/Events/popuphiding
type Popuphiding interface {
	OnPopuphiding(e *Event)
}

// Popupshowing is an event fired when a menupopup, panel or tooltip is about
// to become visible.
//
// https://developer.mozilla.org/docs/Web/Events/popupshowing
type Popupshowing interface {
	OnPopupshowing(e *Event)
}

// Popupshown is an event fired when a menupopup, panel or tooltip has become
// visible.
//
// https://developer.mozilla.org/docs/Web/Events/popupshown
type Popupshown interface {
	OnPopupshown(e *Event)
}

// Progress is an event fired when the user agent is downloading resources
// listed by the manifest.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/progress_(appcache_event)
type Progress interface {
	OnProgress(e *Event)
}

// Push is an event fired when a Service Worker has received a push message.
//
// https://developer.mozilla.org/docs/Web/Events/push
type Push interface {
	OnPush(e *Event)
}

// PushSubscriptionChange is an event fired when a PushSubscription has
// expired.
//
// https://developer.mozilla.org/docs/Web/Events/pushsubscriptionchange
type PushSubscriptionChange interface {
	OnPushSubscriptionChange(e *Event)
}

// RadioStateChange is an event fired when the state of a radio has been
// changed either by a user action or by a script (useful for accessibility).
//
// https://developer.mozilla.org/docs/Web/Events/RadioStateChange
type RadioStateChange interface {
	OnRadioStateChange(e *Event)
}

// RateChange is an event fired when the playback rate has changed.
//
// https://developer.mozilla.org/docs/Web/Events/ratechange
type RateChange interface {
	OnRateChange(e *Event)
}

// ReadyStateChange is an event fired when the readyState attribute of a
// document has changed.
//
// https://developer.mozilla.org/docs/Web/Events/readystatechange
type ReadyStateChange interface {
	OnReadyStateChange(e *Event)
}

// Received is an event fired when an SMS has been received.
//
// https://developer.mozilla.org/docs/Web/Events/received
type Received interface {
	OnReceived(e *Event)
}

// RepeatEvent is an event fired when a SMIL animation element is repeated.
//
// https://developer.mozilla.org/docs/Web/Events/repeatEvent
type RepeatEvent interface {
	OnRepeatEvent(e *Event)
}

// Reset is an event fired when a form is reset.
//
// https://developer.mozilla.org/docs/Web/Events/reset
type Reset interface {
	OnReset(e *Event)
}

// Resize is an event fired when the document view has been resized.
//
// https://developer.mozilla.org/docs/Web/Events/resize
type Resize interface {
	OnResize(e *Event)
}

// ResourceTimingBufferFull is an event fired when the browser's resource
// timing buffer is full.
//
// https://developer.mozilla.org/docs/Web/Events/resourcetimingbufferfull
type ResourceTimingBufferFull interface {
	OnResourceTimingBufferFull(e *Event)
}

// Result is an event fired when the speech recognition service returns a
// result — a word or phrase has been positively recognized and this has been
// communicated back to the app.
//
// https://developer.mozilla.org/docs/Web/Events/result
type Result interface {
	OnResult(e *Event)
}

// Resume is an event fired when a paused utterance is resumed.
//
// https://developer.mozilla.org/docs/Web/Events/resume
type Resume interface {
	OnResume(e *Event)
}

// Resuming is an event fired when a call is about to resume.
//
// https://developer.mozilla.org/docs/Web/Events/resuming
type Resuming interface {
	OnResuming(e *Event)
}

// SSTabClosing is an event fired when the session store will stop tracking
// this tab.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/SSTabClosing
type SSTabClosing interface {
	OnSSTabClosing(e *Event)
}

// SSTabRestored is an event fired when a tab has been restored.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/SSTabRestored
type SSTabRestored interface {
	OnSSTabRestored(e *Event)
}

// SSTabRestoring is an event fired when a tab is about to be restored.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/SSTabRestoring
type SSTabRestoring interface {
	OnSSTabRestoring(e *Event)
}

// SSWindowClosing is an event fired when the session store will stop tracking
// this window.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/SSWindowClosing
type SSWindowClosing interface {
	OnSSWindowClosing(e *Event)
}

// SSWindowStateBusy is an event fired when a window state has switched to
// "busy".
//
// https://developer.mozilla.org/docs/Web/Reference/Events/SSWindowStateBusy
type SSWindowStateBusy interface {
	OnSSWindowStateBusy(e *Event)
}

// SSWindowStateReady is an event fired when a window state has switched to
// "ready".
//
// https://developer.mozilla.org/docs/Web/Reference/Events/SSWindowStateReady
type SSWindowStateReady interface {
	OnSSWindowStateReady(e *Event)
}

// SVGAbort is an event fired when page loading has been stopped before the SVG
// was loaded.
//
// https://developer.mozilla.org/docs/Web/Events/SVGAbort
type SVGAbort interface {
	OnSVGAbort(e *Event)
}

// SVGError is an event fired when an error has occurred before the SVG was
// loaded.
//
// https://developer.mozilla.org/docs/Web/Events/SVGError
type SVGError interface {
	OnSVGError(e *Event)
}

// SVGLoad is an event fired when an SVG document has been loaded and parsed.
//
// https://developer.mozilla.org/docs/Web/Events/SVGLoad
type SVGLoad interface {
	OnSVGLoad(e *Event)
}

// SVGResize is an event fired when an SVG document is being resized.
//
// https://developer.mozilla.org/docs/Web/Events/SVGResize
type SVGResize interface {
	OnSVGResize(e *Event)
}

// SVGScroll is an event fired when an SVG document is being scrolled.
//
// https://developer.mozilla.org/docs/Web/Events/SVGScroll
type SVGScroll interface {
	OnSVGScroll(e *Event)
}

// SVGUnload is an event fired when an SVG document has been removed from a
// window or frame.
//
// https://developer.mozilla.org/docs/Web/Events/SVGUnload
type SVGUnload interface {
	OnSVGUnload(e *Event)
}

// SVGZoom is an event fired when an SVG document is being zoomed.
//
// https://developer.mozilla.org/docs/Web/Events/SVGZoom
type SVGZoom interface {
	OnSVGZoom(e *Event)
}

// Scroll is an event fired when the document view or an element has been
// scrolled.
//
// https://developer.mozilla.org/docs/Web/Events/scroll
type Scroll interface {
	OnScroll(e *Event)
}

// Seeked is an event fired when a seek operation completed.
//
// https://developer.mozilla.org/docs/Web/Events/seeked
type Seeked interface {
	OnSeeked(e *Event)
}

// Seeking is an event fired when a seek operation began.
//
// https://developer.mozilla.org/docs/Web/Events/seeking
type Seeking interface {
	OnSeeking(e *Event)
}

// Select is an event fired when some text is being selected.
//
// https://developer.mozilla.org/docs/Web/Events/select
type Select interface {
	OnSelect(e *Event)
}

// SelectStart is an event fired when a selection just started.
//
// https://developer.mozilla.org/docs/Web/Events/selectstart
type SelectStart interface {
	OnSelectStart(e *Event)
}

// SelectionChange is an event fired when the selection in the document has
// been changed.
//
// https://developer.mozilla.org/docs/Web/Events/selectionchange
type SelectionChange interface {
	OnSelectionChange(e *Event)
}

// Sent is an event fired when an SMS has been sent.
//
// https://developer.mozilla.org/docs/Web/Events/sent
type Sent interface {
	OnSent(e *Event)
}

// Show is an event fired when a contextmenu event was fired on/bubbled to an
// element that has a contextmenu attribute
//
// https://developer.mozilla.org/docs/Web/Events/show
type Show interface {
	OnShow(e *Event)
}

// Sizemodechange is an event fired when window has entered/left fullscreen
// mode, or has been minimized/unminimized.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/sizemodechange
type Sizemodechange interface {
	OnSizemodechange(e *Event)
}

// Slotchange is an event fired when the node contents of a HTMLSlotElement
// (<slot>) have changed.
//
// https://developer.mozilla.org/docs/Web/Events/slotchange
type Slotchange interface {
	OnSlotchange(e *Event)
}

// Smartcard-insert is an event fired when a smartcard has been inserted.
//
// https://developer.mozilla.org/docs/Web/Events/smartcard-insert
type Smartcard-insert interface {
	OnSmartcard-insert(e *Event)
}

// Smartcard-remove is an event fired when a smartcard has been removed.
//
// https://developer.mozilla.org/docs/Web/Events/smartcard-remove
type Smartcard-remove interface {
	OnSmartcard-remove(e *Event)
}

// SoundEnd is an event fired when any sound — recognisable speech or not —
// has stopped being detected.
//
// https://developer.mozilla.org/docs/Web/Events/soundend
type SoundEnd interface {
	OnSoundEnd(e *Event)
}

// SoundStart is an event fired when any sound — recognisable speech or not
// — has been detected.
//
// https://developer.mozilla.org/docs/Web/Events/soundstart
type SoundStart interface {
	OnSoundStart(e *Event)
}

// SpeechEnd is an event fired when speech recognised by the speech recognition
// service has stopped being detected.
//
// https://developer.mozilla.org/docs/Web/Events/speechend
type SpeechEnd interface {
	OnSpeechEnd(e *Event)
}

// SpeechStart is an event fired when sound that is recognised by the speech
// recognition service as speech has been detected.
//
// https://developer.mozilla.org/docs/Web/Events/speechstart
type SpeechStart interface {
	OnSpeechStart(e *Event)
}

// Stalled is an event fired when the user agent is trying to fetch media data,
// but data is unexpectedly not forthcoming.
//
// https://developer.mozilla.org/docs/Web/Events/stalled
type Stalled interface {
	OnStalled(e *Event)
}

// Start is an event fired when the utterance has begun to be spoken.
//
// https://developer.mozilla.org/docs/Web/Events/start_(SpeechSynthesis)
type Start interface {
	OnStart(e *Event)
}

// Statechange is an event fired when the state of a call has changed.
//
// https://developer.mozilla.org/docs/Web/Events/statechange
type Statechange interface {
	OnStatechange(e *Event)
}

// Statuschange is an event fired when the status of the Wifi connection
// changed.
//
// https://developer.mozilla.org/docs/Web/Events/statuschange
type Statuschange interface {
	OnStatuschange(e *Event)
}

// Stkcommand is an event fired when the STK Proactive Command is issued from
// ICC.
//
// https://developer.mozilla.org/docs/Web/Events/stkcommand
type Stkcommand interface {
	OnStkcommand(e *Event)
}

// Stksessionend is an event fired when the STK Session is terminated by ICC.
//
// https://developer.mozilla.org/docs/Web/Events/stksessionend
type Stksessionend interface {
	OnStksessionend(e *Event)
}

// Storage is an event fired when a storage area (localStorage or
// sessionStorage) has changed.
//
// https://developer.mozilla.org/docs/Web/Events/storage
type Storage interface {
	OnStorage(e *Event)
}

// Submit is an event fired when a form is submitted.
//
// https://developer.mozilla.org/docs/Web/Events/submit
type Submit interface {
	OnSubmit(e *Event)
}

// Success is an event fired when a request successfully completed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/success_indexedDB
type Success interface {
	OnSuccess(e *Event)
}

// Suspend is an event fired when media data loading has been suspended.
//
// https://developer.mozilla.org/docs/Web/Events/suspend
type Suspend interface {
	OnSuspend(e *Event)
}

// TabClose is an event fired when a tab has been closed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/TabClose
type TabClose interface {
	OnTabClose(e *Event)
}

// TabHide is an event fired when a tab has been hidden.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/TabHide
type TabHide interface {
	OnTabHide(e *Event)
}

// TabOpen is an event fired when a tab has been opened.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/TabOpen
type TabOpen interface {
	OnTabOpen(e *Event)
}

// TabPinned is an event fired when a tab has been pinned.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/TabPinned
type TabPinned interface {
	OnTabPinned(e *Event)
}

// TabSelect is an event fired when a tab has been selected.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/TabSelect
type TabSelect interface {
	OnTabSelect(e *Event)
}

// TabShow is an event fired when a tab has been shown.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/TabShow
type TabShow interface {
	OnTabShow(e *Event)
}

// TabUnpinned is an event fired when a tab has been unpinned.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/TabUnpinned
type TabUnpinned interface {
	OnTabUnpinned(e *Event)
}

// TimeUpdate is an event fired when the time indicated by the currentTime
// attribute has been updated.
//
// https://developer.mozilla.org/docs/Web/Events/timeupdate
type TimeUpdate interface {
	OnTimeUpdate(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/timeout
type Timeout interface {
	OnTimeout(e *Event)
}

// TouchCancel is an event fired when a touch point has been disrupted in an
// implementation-specific manners (too many touch points for example).
//
// https://developer.mozilla.org/docs/Web/Events/touchcancel
type TouchCancel interface {
	OnTouchCancel(e *Event)
}

// TouchEnd is an event fired when a touch point is removed from the touch
// surface.
//
// https://developer.mozilla.org/docs/Web/Events/touchend
type TouchEnd interface {
	OnTouchEnd(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/touchenter
type TouchEnter interface {
	OnTouchEnter(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/touchleave
type TouchLeave interface {
	OnTouchLeave(e *Event)
}

// TouchMove is an event fired when a touch point is moved along the touch
// surface.
//
// https://developer.mozilla.org/docs/Web/Events/touchmove
type TouchMove interface {
	OnTouchMove(e *Event)
}

// TouchStart is an event fired when a touch point is placed on the touch
// surface.
//
// https://developer.mozilla.org/docs/Web/Events/touchstart
type TouchStart interface {
	OnTouchStart(e *Event)
}

// TransitionEnd is an event fired when a CSS transition has completed.
//
// https://developer.mozilla.org/docs/Web/Events/transitionend
type TransitionEnd interface {
	OnTransitionEnd(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/transitioncancel
type Transitioncancel interface {
	OnTransitioncancel(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/transitionrun
type Transitionrun interface {
	OnTransitionrun(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/transitionstart
type Transitionstart interface {
	OnTransitionstart(e *Event)
}

// Underflow is an event fired when an element is no longer overflowed by its
// content (only works for elements styled with overflow != visible).
//
// https://developer.mozilla.org/docs/Web/Events/underflow
type Underflow interface {
	OnUnderflow(e *Event)
}

// Unload is an event fired when the document or a dependent resource is being
// unloaded.
//
// https://developer.mozilla.org/docs/Web/Events/unload
type Unload interface {
	OnUnload(e *Event)
}

// UpdateReady is an event fired when the resources listed in the manifest have
// been newly redownloaded, and the script can use swapCache() to switch to the
// new cache.
//
// https://developer.mozilla.org/docs/Web/Events/updateready
type UpdateReady interface {
	OnUpdateReady(e *Event)
}

// UpgradeNeeded is an event fired when an attempt was made to open a database
// with a version number higher than its current version. A versionchange
// transaction has been created.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/upgradeneeded_indexedDB
type UpgradeNeeded interface {
	OnUpgradeNeeded(e *Event)
}

// UserProximity is an event fired when fresh data is available from a
// proximity sensor (indicates whether the nearby object is near the device or
// not).
//
// https://developer.mozilla.org/docs/Web/Events/userproximity
type UserProximity interface {
	OnUserProximity(e *Event)
}

// Ussdreceived is an event fired when a new USSD message is received
//
// https://developer.mozilla.org/docs/Web/Events/ussdreceived
type Ussdreceived interface {
	OnUssdreceived(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/vrdisplaypresentchange
type VRDisplayPresentChange interface {
	OnVRDisplayPresentChange(e *Event)
}

// ValueChange is an event fired when the value of an element has changed (a
// progress bar for example, useful for accessibility).
//
// https://developer.mozilla.org/docs/Web/Events/ValueChange
type ValueChange interface {
	OnValueChange(e *Event)
}

// VersionChange is an event fired when a versionchange transaction completed.
//
// https://developer.mozilla.org/docs/Web/Reference/Events/versionchange_indexedDB
type VersionChange interface {
	OnVersionChange(e *Event)
}

// VisibilityChange is an event fired when the content of a tab has become
// visible or has been hidden.
//
// https://developer.mozilla.org/docs/Web/Events/visibilitychange
type VisibilityChange interface {
	OnVisibilityChange(e *Event)
}

// Voicechange is an event fired when the MozMobileConnection.voice object
// changes values.
//
// https://developer.mozilla.org/docs/Web/Events/voicechange
type Voicechange interface {
	OnVoicechange(e *Event)
}

// VoicesChanged is an event fired when the list of SpeechSynthesisVoice
// objects that would be returned by the SpeechSynthesis.getVoices() method has
// changed (when the voiceschanged event fires.)
//
// https://developer.mozilla.org/docs/Web/Events/voiceschanged
type VoicesChanged interface {
	OnVoicesChanged(e *Event)
}

// VolumeChange is an event fired when the volume has changed.
//
// https://developer.mozilla.org/docs/Web/Events/volumechange
type VolumeChange interface {
	OnVolumeChange(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/vrdisplayactivate
type Vrdisplayactivate interface {
	OnVrdisplayactivate(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/vrdisplayblur
type Vrdisplayblur interface {
	OnVrdisplayblur(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/vrdisplayconnect
type Vrdisplayconnect interface {
	OnVrdisplayconnect(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/vrdisplaydeactivate
type Vrdisplaydeactivate interface {
	OnVrdisplaydeactivate(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/vrdisplaydisconnect
type Vrdisplaydisconnect interface {
	OnVrdisplaydisconnect(e *Event)
}

// (no documentation)
//
// https://developer.mozilla.org/docs/Web/Events/vrdisplayfocus
type Vrdisplayfocus interface {
	OnVrdisplayfocus(e *Event)
}

// Waiting is an event fired when playback has stopped because of a temporary
// lack of data.
//
// https://developer.mozilla.org/docs/Web/Events/waiting
type Waiting interface {
	OnWaiting(e *Event)
}

// Wheel is an event fired when a wheel button of a pointing device is rotated
// in any direction.
//
// https://developer.mozilla.org/docs/Web/Events/wheel
type Wheel interface {
	OnWheel(e *Event)
}

func registerCallback(t reflect.Type) {
	if thinger, isThinger:= c.(Abort); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AfterPrint); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Afterscriptexecute); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AlertActive); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AlertClose); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Alerting); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AnimationEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AnimationIteration); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AnimationStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Appinstalled); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AudioEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AudioProcess); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(AudioStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Auxclick); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(BeforePrint); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(BeforeUnload); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Beforeinstallprompt); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Beforescriptexecute); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(BeginEvent); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Blocked); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Blur); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Boundary); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Broadcast); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Busy); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Cached); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Callschanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CanPlay); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CanPlayThrough); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Cardstatechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Cfstatechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Change); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(ChargingChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(ChargingTimeChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CheckboxStateChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Checking); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Click); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Close); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Command); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Commandupdate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Complete); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CompositionEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CompositionStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CompositionUpdate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Connecting); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(ConnectionInfoUpdate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(ContextMenu); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Copy); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CssRuleViewCSSLinkClicked); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CssRuleViewChanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(CssRuleViewRefreshed); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Cut); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMAutoComplete); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMContentLoaded); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMFrameContentLoaded); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMLinkAdded); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMLinkRemoved); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMMenuItemActive); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMMenuItemInactive); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMMetaAdded); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMMetaRemoved); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMModalDialogClosed); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMPopupBlocked); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMTitleChanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMWillOpenModalDialog); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMWindowClose); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DOMWindowCreated); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Datachange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Dataerror); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Delivered); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DeviceLight); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DeviceMotion); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DeviceOrientation); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DeviceProximity); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Devicechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Dialing); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Disabled); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DischargingTimeChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Disconnected); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Disconnecting); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DoubleClick); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Downloading); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Drag); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DragEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DragEnter); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DragLeave); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DragOver); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DragStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Drop); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(DurationChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Emptied); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Enabled); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(End); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(EndEvent); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Ended); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Error); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Focus); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(FocusIn); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(FocusOut); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(FullScreenChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(FullScreenError); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Fullscreen); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(GamepadConnected); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(GamepadDisconnected); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(GotPointerCapture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(HashChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Held); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Holding); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Icccardlockerror); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Iccinfochange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Incoming); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Input); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Invalid); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(KeyDown); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(KeyPress); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(KeyUp); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(LanguageChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(LevelChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Load); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(LoadEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(LoadStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(LoadedData); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(LoadedMetadata); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Localized); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(LostPointerCapture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mark); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Message); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Messageerror); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MouseDown); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MouseEnter); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MouseLeave); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MouseMove); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MouseOut); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MouseOver); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MouseUp); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozAfterPaint); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozAudioAvailable); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozBeforeResize); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozEdgeUIGesture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozEnteredDomFullscreen); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozGamepadButtonDown); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozGamepadButtonUp); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozMagnifyGesture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozMagnifyGestureStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozMagnifyGestureUpdate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozPressTapGesture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozRotateGesture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozRotateGestureStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozRotateGestureUpdate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozScrolledAreaChanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozSwipeGesture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(MozTapGesture); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowseractivitydone); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserasyncscroll); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowseraudioplaybackchange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsercaretstatechanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserclose); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsercontextmenu); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserdocumentfirstpaint); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsererror); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserfindchange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserfirstpaint); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsericonchange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserloadend); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserloadstart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserlocationchange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsermanifestchange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsermetachange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowseropensearch); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowseropentab); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowseropenwindow); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserresize); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserscroll); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserscrollareachanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserscrollviewchange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsersecuritychange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserselectionstatechanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsershowmodalprompt); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowsertitlechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowserusernameandpasswordrequired); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Mozbrowservisibilitychange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Moztimechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(NoMatch); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(NoUpdate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(NotificationClick); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Obsolete); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Offline); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Onconnected); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Online); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Open); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(OrientationChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Overflow); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PageHide); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PageShow); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Paste); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Pause); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Play); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Playing); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerCancel); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerDown); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerEnter); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerLeave); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerLockChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerLockError); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerMove); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerOut); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerOver); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PointerUp); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PopState); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Popuphidden); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Popuphiding); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Popupshowing); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Popupshown); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Progress); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Push); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(PushSubscriptionChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(RadioStateChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(RateChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(ReadyStateChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Received); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(RepeatEvent); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Reset); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Resize); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(ResourceTimingBufferFull); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Result); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Resume); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Resuming); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SSTabClosing); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SSTabRestored); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SSTabRestoring); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SSWindowClosing); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SSWindowStateBusy); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SSWindowStateReady); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SVGAbort); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SVGError); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SVGLoad); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SVGResize); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SVGScroll); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SVGUnload); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SVGZoom); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Scroll); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Seeked); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Seeking); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Select); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SelectStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SelectionChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Sent); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Show); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Sizemodechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Slotchange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Smartcard-insert); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Smartcard-remove); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SoundEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SoundStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SpeechEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(SpeechStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Stalled); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Start); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Statechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Statuschange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Stkcommand); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Stksessionend); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Storage); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Submit); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Success); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Suspend); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TabClose); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TabHide); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TabOpen); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TabPinned); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TabSelect); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TabShow); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TabUnpinned); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TimeUpdate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Timeout); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TouchCancel); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TouchEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TouchEnter); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TouchLeave); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TouchMove); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TouchStart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(TransitionEnd); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Transitioncancel); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Transitionrun); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Transitionstart); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Underflow); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Unload); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(UpdateReady); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(UpgradeNeeded); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(UserProximity); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Ussdreceived); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(VRDisplayPresentChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(ValueChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(VersionChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(VisibilityChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Voicechange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(VoicesChanged); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(VolumeChange); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Vrdisplayactivate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Vrdisplayblur); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Vrdisplayconnect); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Vrdisplaydeactivate); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Vrdisplaydisconnect); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Vrdisplayfocus); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Waiting); isMounter {
		//Make The Callback
	}

	if thinger, isThinger:= c.(Wheel); isMounter {
		//Make The Callback
	}

}